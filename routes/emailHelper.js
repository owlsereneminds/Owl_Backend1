import express from "express";
import nodemailer from "nodemailer";
import dotenv from "dotenv";
import path from "path";
const imagePath = "https://cvlxdzptoolrdpdnumao.supabase.co/storage/v1/object/public/meeting_recordings/1.png";

dotenv.config();

const app = express();
app.use(express.json());

/** Helper functions **/
function boldify(text = "") {
  return text.replace(/\*\*(.*?)\*\*/g, "<b>$1</b>");
}

function formatDuration(ms = 0) {
  const totalSeconds = Math.floor(ms / 1000);
  if (totalSeconds < 60) return `${totalSeconds} sec${totalSeconds !== 1 ? "s" : ""}`;
  const totalMinutes = Math.floor(totalSeconds / 60);
  if (totalMinutes < 60) return `${totalMinutes} min${totalMinutes !== 1 ? "s" : ""}`;
  const hours = Math.floor(totalMinutes / 60);
  const minutes = totalMinutes % 60;
  return `${hours} hr${hours !== 1 ? "s" : ""}${minutes > 0 ? ` ${minutes} min${minutes !== 1 ? "s" : ""}` : ""}`;
}

function formatDate(isoString) {
  if (!isoString) return "N/A";
  const date = new Date(isoString);
  return date.toLocaleString("en-IN", { dateStyle: "medium", timeStyle: "short" });
}

function cleanParticipants(rawParticipants = []) {
  const names = new Set();

  rawParticipants.forEach(p => {
    if (!p?.name) return;

    // Extract only alphabetic/space parts, remove extra labels or duplicates
    const cleanName = p.name
      .split(/\n+/) // break into lines
      .map(line => line.trim())
      .filter(line =>
        line &&
        !/frame_person|Reframe|visual_effects|Backgrounds|effects|more_vert|More options/i.test(line)
      );

    // Add each unique, cleaned line to the set
    cleanName.forEach(n => names.add(n));
  });

  return [...names];
}


/** POST /send-email **/
app.post("/", async (req, res) => {
  try {
    const { toEmail, subject, analysis, meta = {}, duration } = req.body;

    if (!toEmail) return res.status(400).json({ error: "Recipient email required" });

    const transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST,
      port: Number(process.env.SMTP_PORT || 587),
      secure: false,
      auth: { user: process.env.SMTP_USER, pass: process.env.SMTP_PASS },
    });

    const cleanedNames = cleanParticipants(meta.participants || []);
    const participants = cleanedNames.length > 0 ? cleanedNames.join(", ") : "N/A";

    const Subject = `Owl Meeting Notes - ${meta.meetingInfo?.meetingCode || "Session"}`;



    const htmlContent = `
      <div style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width:700px; margin:auto;"> 
        <div style="text-align:center; margin-bottom:20px;">
          <img src="cid:bannerImage" alt="Serene MINDS" style="max-width:100%; border-radius:8px;" /> 
        </div>
        <div style="padding:20px; background:#fff;">
          <p><b>Title:</b> Meet with ${meta.googleUser.name || "Patient"}</p>
          <p><b>Participants:</b> ${participants}</p>
          <p><b>Duration:</b> ${formatDuration(meta.durationMs || meta.duration || duration || 0)}</p>
        </div>
        <hr style="border:none; border-top:1px solid #eee; margin:0;"/>
        <div style="padding:20px; background:#fafafa;">
          <h3 style="margin-top:0; color:#444;">Summary</h3>
          <p>${boldify(analysis.summary) || "No summary provided"}</p>
          <h3 style="color:#444;">SOAP Notes</h3>
          <div style="background:#fff; padding:15px; border:1px solid #ddd; border-radius:6px; white-space:pre-wrap;">
            ${boldify(analysis.soap) || "N/A"}
          </div>
          <h3 style="color:#444;">Tips & Recommendations</h3>
          <ul>
            ${(analysis.tips || "").split("\n").filter(t => t.trim() !== "").map(t => `<li>${boldify(t)}</li>`).join("")}
          </ul>
        </div>
        <div style="padding:15px; text-align:center; background:#f5f7fa; color:#888; font-size:12px;">
          Generated by <b>Owl</b> ¬∑ Serene MINDS
        </div>
      </div>
    `;

    const attachments = [];
    if (imagePath) {
      attachments.push({ filename: imagePath.split("/").pop(), path: imagePath, cid: "bannerImage" });
    }

    const info = await transporter.sendMail({
      from: `"Serene Minds Owl" <${process.env.SMTP_USER}>`,
      to: toEmail,
      subject: Subject, // üëà lowercase key
      html: htmlContent,
      attachments,
    });

    console.log("‚úÖ Email sent:", info.messageId);
    res.json({ ok: true, messageId: info.messageId });
  } catch (err) {
    console.error("‚ùå send-email error:", err);
    res.status(500).json({ error: String(err) });
  }
});

export default app;
